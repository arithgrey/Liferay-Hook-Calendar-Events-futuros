<%@page import="java.util.Date"%>
<%
PortletURL iteratorURL = PortletURLUtil.clone(portletURL, renderResponse);
List<String> headerNames = new ArrayList<String>();
//Cabeceras en el portlet
headerNames.add("date");
headerNames.add("time");
headerNames.add("title");
headerNames.add("type");
headerNames.add("details");
//Cabecera bacía
headerNames.add(StringPool.BLANK);
//Servicio que manda a traer los contenidos 
SearchContainer searchContainer = new SearchContainer(renderRequest, null, null, SearchContainer.DEFAULT_CUR_PARAM, SearchContainer.DEFAULT_DELTA, iteratorURL, headerNames, null);
//Número total de eventos
int total = CalEventServiceUtil.getEventsCount(scopeGroupId, eventType);
searchContainer.setTotal(total);
int numeroTotal=total-20;

//Número eventos a mostrar por default
List results = CalEventServiceUtil.getEvents(scopeGroupId, eventType, numeroTotal,
 searchContainer.getEnd());

searchContainer.setResults(results);
List resultRows = searchContainer.getResultRows();

//Iteramos desde cero hasta el número de elementos por default a mostrar
for (int i = 0; i < results.size(); i++) {
    CalEvent event = (CalEvent)results.get(i);
//Cadena en donde guardar día, mes, y hora de cada evento.
    String AEvent="";   
    String MEvent="";
    String dEvent="";
//Enteros en donde guardar los valores de día, mes, y hora de cada evento como entero.
    int AEvento;
    int MesEvento;
    int DiaEvento;
//Cadena en donde guardar día, mes, y hora del día actual.
    String AñoA="";
    String MesA="";
    String DiaA="";
//Enteros en donde guardar los valores de día, mes, y hora del día
    int AñoActual;
    int MesActual;
    int DiaActual;

//Guardamos en una cadena la fecha por evento con el formato del servidor
    String FecheEvento=dateFormatDate.format(Time.getDate(event.getStartDate(), timeZone));
    //Si la cadena del evento pose en su segundo carácter un  / 
    if(FecheEvento.charAt(1)!='/'){
                //Guardamos en cada cadena los elementos sacados respecto a sus posiciones

                AEvent=""+FecheEvento.charAt(6)+FecheEvento.charAt(7);
                MEvent=""+FecheEvento.charAt(3)+FecheEvento.charAt(4);
                dEvent=""+FecheEvento.charAt(0)+FecheEvento.charAt(1);
                 
              //Pasamos las cadenas anteriores a enteros
                AEvento=Integer.parseInt(AEvent);
                MesEvento=Integer.parseInt(MEvent);
                DiaEvento=Integer.parseInt(dEvent);
    }else{
             //Si la cadena tiene el siguiente formato  8/09/12   
             //Guardamos en cada cadena los elementos sacados respecto a sus posiciones
                AEvent=""+FecheEvento.charAt(5)+FecheEvento.charAt(6);
                MEvent=""+FecheEvento.charAt(2)+FecheEvento.charAt(3);
                dEvent=""+FecheEvento.charAt(0);
                 
             //Pasamos las cadenas anteriores a enteros
                AEvento=Integer.parseInt(AEvent);
                MesEvento=Integer.parseInt(MEvent);
                DiaEvento=Integer.parseInt(dEvent);
    }


    //Creamos un objeto Date
    Date f=new Date();
    //Guardamos en una cadena la fecha Actual
    String F=dateFormatDate.format(Time.getDate(f, timeZone));
    
    //Si la cadena  pose en su segundo carácter un  / 
    if(F.charAt(1)!='/'){
            //Guardamos en cada cadena los elementos sacados respecto a sus posiciones
            AñoA=""+F.charAt(6)+F.charAt(7);
            MesA=""+F.charAt(3)+F.charAt(4);
            DiaA=""+F.charAt(0)+F.charAt(1);

            //Pasamos las cadenas a enteros 
            AñoActual=Integer.parseInt(AñoA);
            MesActual=Integer.parseInt(MesA);
            DiaActual=Integer.parseInt(DiaA);
            
    }else{
            //Guardamos en cada cadena los elementos sacados respecto a sus posiciones
            AñoA=""+F.charAt(5)+F.charAt(6);
            MesA=""+F.charAt(2)+F.charAt(3);
            DiaA=""+F.charAt(0);
            //Pasamos las cadenas a enteros  
            AñoActual=Integer.parseInt(AñoA);
            MesActual=Integer.parseInt(MesA);
            DiaActual=Integer.parseInt(DiaA);    

    }
    /*
    imprimir eventos y fecha actual
    %><%="Fecha Actual:"+F +""%><%
    %><%="Fecha de inicio en evento:--"+FecheEvento +"<br>"%><%
    */

    //Si el año actual es menor o igual al año del evento
    if(AñoActual<=AEvento){
        //Si el mes actual es menor o igual al del evento
        if(MesActual<=MesEvento){
            //Si el día actual es menor o igual al del evento
            if(DiaActual<=DiaEvento){
                
            	
                event = event.toEscapedModel();

                ResultRow row = new ResultRow(event, event.getEventId(), i);

                PortletURL rowURL = renderResponse.createRenderURL();

                rowURL.setParameter("struts_action", "/calendar/view_event");
                rowURL.setParameter("redirect", currentURL);
                rowURL.setParameter("eventId", String.valueOf(event.getEventId()));
                
                
                
                if (event.isTimeZoneSensitive()) {
                    
                    row.addText(dateFormatDate.format(Time.getDate(event.getStartDate(), timeZone)), rowURL);
                }
                else {
                    row.addText(dateFormatDate.format(Time.getDate(event.getStartDate(), TimeZoneUtil.getDefault())), rowURL);
                }
				
                // Tiempo
                boolean allDay = CalUtil.isAllDay(event, timeZone, locale);

                if (allDay) {
                    row.addText(LanguageUtil.get(pageContext, "all-day"), rowURL);
                }
                else {
                	
                    if (event.isTimeZoneSensitive()) {
                        row.addText(
                            dateFormatTime.format(Time.getDate(event.getStartDate(), timeZone)) + " &#150; " + dateFormatTime.format(Time.getDate(CalUtil.getEndTime(event), timeZone)),
                            rowURL);
                    }
                    else {
                        row.addText(
                            dateFormatTime.format(Time.getDate(event.getStartDate(), TimeZoneUtil.getDefault())) + " &#150; " + dateFormatTime.format(Time.getDate(CalUtil.getEndTime(event), TimeZoneUtil.getDefault())),
                            rowURL);
                    }
                }
                // Title and type
                row.addText(event.getTitle(), rowURL);
                row.addText(LanguageUtil.get(pageContext, HtmlUtil.unescape(event.getType())), rowURL);
                
                row.addJSP("left", SearchEntry.DEFAULT_VALIGN, "/html/portlet/calendar/view_event_recurrence.jsp");
                // Action

                row.addJSP("right", SearchEntry.DEFAULT_VALIGN, "/html/portlet/calendar/event_action.jsp");
                // Add result row
    
                resultRows.add(row);
                }
            }
        }else{
            //No se muestra    
    }
}
     //No se muestra
%>


<c:if test="<%= CalendarPermission.contains(permissionChecker, scopeGroupId, ActionKeys.ADD_EVENT) %>">
    <div>
        <portlet:renderURL var="editEventURL">
            <portlet:param name="struts_action" value="/calendar/edit_event" />
            <portlet:param name="redirect" value="<%= currentURL %>" />
            <portlet:param name="backURL" value="<%= currentURL %>" />
            <portlet:param name="month" value="<%= String.valueOf(selMonth) %>" />
            <portlet:param name="day" value="<%= String.valueOf(selDay) %>" />
            <portlet:param name="year" value="<%= String.valueOf(selYear) %>" />
        </portlet:renderURL>

        <aui:button href="<%= editEventURL %>" value="add-event" />
    </div>
    <br />   
</c:if>
<h1><%="elementos totales:"+total +""%></h1>
<h1><%="elementos por default:"+ results.size() +""%></h1>



<liferay-ui:search-iterator searchContainer="<%= searchContainer %>"/>
<%
PortalUtil.setPageSubtitle(LanguageUtil.get(pageContext, "events"), request);
%>
